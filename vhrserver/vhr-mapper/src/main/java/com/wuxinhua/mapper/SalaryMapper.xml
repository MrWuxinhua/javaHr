<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wuxinhua.mapper.SalaryMapper">
    <resultMap id="BaseResultMap" type="com.wuxinhua.model.Salary">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="basicSalary" property="basicSalary" jdbcType="INTEGER"/>
        <result column="bonus" property="bonus" jdbcType="INTEGER"/>
        <result column="lunchSalary" property="lunchSalary" jdbcType="INTEGER"/>
        <result column="trafficSalary" property="trafficSalary" jdbcType="INTEGER"/>
        <result column="allSalary" property="allSalary" jdbcType="INTEGER"/>
        <result column="pensionBase" property="pensionBase" jdbcType="INTEGER"/>
        <result column="pensionPer" property="pensionPer" jdbcType="REAL"/>
        <result column="createDate" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="medicalBase" property="medicalBase" jdbcType="INTEGER"/>
        <result column="medicalPer" property="medicalPer" jdbcType="REAL"/>
        <result column="accumulationFundBase" property="accumulationFundBase" jdbcType="INTEGER"/>
        <result column="accumulationFundPer" property="accumulationFundPer" jdbcType="REAL"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, basicSalary, bonus, lunchSalary, trafficSalary, allSalary, pensionBase, pensionPer, 
    createDate, medicalBase, medicalPer, accumulationFundBase, accumulationFundPer, name
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from salary
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.wuxinhua.model.Salary">
    insert into salary (id, basicSalary, bonus, 
      lunchSalary, trafficSalary, allSalary, 
      pensionBase, pensionPer, createDate, 
      medicalBase, medicalPer, accumulationFundBase, 
      accumulationFundPer, name)
    values (#{id,jdbcType=INTEGER}, #{basicSalary,jdbcType=INTEGER}, #{bonus,jdbcType=INTEGER}, 
      #{lunchSalary,jdbcType=INTEGER}, #{trafficSalary,jdbcType=INTEGER}, #{allSalary,jdbcType=INTEGER}, 
      #{pensionBase,jdbcType=INTEGER}, #{pensionPer,jdbcType=REAL}, #{createDate,jdbcType=TIMESTAMP}, 
      #{medicalBase,jdbcType=INTEGER}, #{medicalPer,jdbcType=REAL}, #{accumulationFundBase,jdbcType=INTEGER}, 
      #{accumulationFundPer,jdbcType=REAL}, #{name,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.wuxinhua.model.Salary">
        insert into salary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="basicSalary != null">
                basicSalary,
            </if>
            <if test="bonus != null">
                bonus,
            </if>
            <if test="lunchSalary != null">
                lunchSalary,
            </if>
            <if test="trafficSalary != null">
                trafficSalary,
            </if>
            <if test="allSalary != null">
                allSalary,
            </if>
            <if test="pensionBase != null">
                pensionBase,
            </if>
            <if test="pensionPer != null">
                pensionPer,
            </if>
            <if test="createDate != null">
                createDate,
            </if>
            <if test="medicalBase != null">
                medicalBase,
            </if>
            <if test="medicalPer != null">
                medicalPer,
            </if>
            <if test="accumulationFundBase != null">
                accumulationFundBase,
            </if>
            <if test="accumulationFundPer != null">
                accumulationFundPer,
            </if>
            <if test="name != null">
                name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="basicSalary != null">
                #{basicSalary,jdbcType=INTEGER},
            </if>
            <if test="bonus != null">
                #{bonus,jdbcType=INTEGER},
            </if>
            <if test="lunchSalary != null">
                #{lunchSalary,jdbcType=INTEGER},
            </if>
            <if test="trafficSalary != null">
                #{trafficSalary,jdbcType=INTEGER},
            </if>
            <if test="allSalary != null">
                #{allSalary,jdbcType=INTEGER},
            </if>
            <if test="pensionBase != null">
                #{pensionBase,jdbcType=INTEGER},
            </if>
            <if test="pensionPer != null">
                #{pensionPer,jdbcType=REAL},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="medicalBase != null">
                #{medicalBase,jdbcType=INTEGER},
            </if>
            <if test="medicalPer != null">
                #{medicalPer,jdbcType=REAL},
            </if>
            <if test="accumulationFundBase != null">
                #{accumulationFundBase,jdbcType=INTEGER},
            </if>
            <if test="accumulationFundPer != null">
                #{accumulationFundPer,jdbcType=REAL},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.wuxinhua.model.Salary">
        update salary
        <set>
            <if test="basicSalary != null">
                basicSalary = #{basicSalary,jdbcType=INTEGER},
            </if>
            <if test="bonus != null">
                bonus = #{bonus,jdbcType=INTEGER},
            </if>
            <if test="lunchSalary != null">
                lunchSalary = #{lunchSalary,jdbcType=INTEGER},
            </if>
            <if test="trafficSalary != null">
                trafficSalary = #{trafficSalary,jdbcType=INTEGER},
            </if>
            <if test="allSalary != null">
                allSalary = #{allSalary,jdbcType=INTEGER},
            </if>
            <if test="pensionBase != null">
                pensionBase = #{pensionBase,jdbcType=INTEGER},
            </if>
            <if test="pensionPer != null">
                pensionPer = #{pensionPer,jdbcType=REAL},
            </if>
            <if test="createDate != null">
                createDate = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="medicalBase != null">
                medicalBase = #{medicalBase,jdbcType=INTEGER},
            </if>
            <if test="medicalPer != null">
                medicalPer = #{medicalPer,jdbcType=REAL},
            </if>
            <if test="accumulationFundBase != null">
                accumulationFundBase = #{accumulationFundBase,jdbcType=INTEGER},
            </if>
            <if test="accumulationFundPer != null">
                accumulationFundPer = #{accumulationFundPer,jdbcType=REAL},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="getAllSalary" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from
        salary
    </select>


    <update id="updateByPrimaryKey" parameterType="com.wuxinhua.model.Salary">
    update salary
    set basicSalary = #{basicSalary,jdbcType=INTEGER},
      bonus = #{bonus,jdbcType=INTEGER},
      lunchSalary = #{lunchSalary,jdbcType=INTEGER},
      trafficSalary = #{trafficSalary,jdbcType=INTEGER},
      allSalary = #{allSalary,jdbcType=INTEGER},
      pensionBase = #{pensionBase,jdbcType=INTEGER},
      pensionPer = #{pensionPer,jdbcType=REAL},
      createDate = #{createDate,jdbcType=TIMESTAMP},
      medicalBase = #{medicalBase,jdbcType=INTEGER},
      medicalPer = #{medicalPer,jdbcType=REAL},
      accumulationFundBase = #{accumulationFundBase,jdbcType=INTEGER},
      accumulationFundPer = #{accumulationFundPer,jdbcType=REAL},
      name = #{name,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <resultMap id="salaryCfgMapper" type="com.wuxinhua.model.SalarySobCfg">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="workID" property="workID"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <association property="department" javaType="com.wuxinhua.model.Department">
            <id column="did" property="id"/>
            <result column="dname" property="name"/>
        </association>
        <association property="salary" javaType="com.wuxinhua.model.Salary">
            <id column="sid" property="id"/>
            <result column="sname" property="name"/>
            <result column="sbasicSalary" property="basicSalary"/>
            <result column="sbonus" property="bonus"/>
            <result column="slunchSalary" property="lunchSalary"/>
            <result column="strafficSalary" property="trafficSalary"/>
            <result column="spensionBase" property="pensionBase"/>
            <result column="spensionPer" property="pensionPer"/>
            <result column="saccumulationFundBase" property="accumulationFundBase"/>
            <result column="saccumulationFundPer" property="accumulationFundPer"/>
            <result column="smedicalBase" property="medicalBase"/>
            <result column="smedicalPer" property="medicalPer"/>
        </association>
    </resultMap>

    <select id="getAllSalarySobCfgs" resultMap="salaryCfgMapper">
            SELECT
                e.id id,
                e.name name,
                e.workID workID,
                e.email email,
                e.phone phone,
                d.id did,
                d.name dname,
                s.id sid,
                s.name sname,
                s.basicSalary sbasicSalary,
                s.bonus  sbonus,
                s.lunchSalary slunchSalary,
                s.trafficSalary strafficSalary,
                s.pensionBase spensionBase,
                s.pensionPer spensionPer,
                s.accumulationFundBase saccumulationFundBase,
                s.accumulationFundPer saccumulationFundPer,
                s.medicalBase smedicalBase,
                s.medicalPer smedicalPer
            FROM
                employee e
                LEFT JOIN empsalary es ON e.id = es.eid
                LEFT JOIN salary s ON es.sid = s.id
                LEFT JOIN department d ON e.departmentId = d.id
            	order by e.id
	            limit #{currentPage} , #{pageSize}

    </select>

    <select id="getSalarySobCfgListTotal" resultType="java.lang.Long">
            SELECT
                count(1)
            FROM
                employee e
            LEFT JOIN empsalary es ON e.id = es.eid
            LEFT JOIN salary s ON es.sid = s.id
            LEFT JOIN department d ON e.departmentId = d.id
            order by e.id
    </select>

</mapper>